"==========================================
"" bundle 插件管理和配置项
"==========================================

" 不兼容VI键盘，使用vim键盘
set nocompatible

filetype off " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"################### 插件管理 ###################
"
" 使用Vundle来管理插件
" vim plugin bundle control, command model
"     :BundleInstall     install 安装配置的插件
"     :BundleInstall!    update  更新
"     :BundleClean       remove plugin not in list 删除本地无用插件
Bundle 'gmarik/Vundle.vim'

" 基础功能增加插件
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'tomtom/tcomment_vim'
Bundle 'majutsushi/tagbar'
Bundle 'kien/ctrlp.vim'
Bundle 'rking/ag.vim'
Bundle 'Shougo/neocomplete'
Bundle 'Shougo/neosnippet'
Bundle 'Shougo/neosnippet-snippets'

" 被动触发
" 可以在你输入一个(或者”之类的配对符号时，自动帮你补全剩余半个
Bundle 'Raimondi/delimitMate'
" 将代码行最后无效的空格标红
Bundle 'bronson/vim-trailing-whitespace'
" 是一个增强的vim状态栏插件，和vim-powerline差不多，被动触发
Bundle 'bling/vim-airline'
" 括号增强，被动触发
Bundle 'kien/rainbow_parentheses.vim'
" 缩进标识
Bundle 'Yggdroot/indentLine'
" 自动识别文件编码
Bundle 'FencView.vim'
Bundle 'airblade/vim-gitgutter'

" Ruby 开发增强
" Bundle 't9md/vim-ruby-xmpfilter'
" Bundle 'tpope/vim-rails' 感觉没啥用
Bundle 'vim-ruby/vim-ruby'
" Bundle 'tpope/vim-rake' 好像没啥用
" Bundle 'tpope/vim-rvm' 不好使

" Color Theme
Bundle 'altercation/vim-colors-solarized'
Bundle 'trusktr/seti.vim'
Bundle 'tomasr/molokai'
Bundle 'chriskempson/vim-tomorrow-theme'

" 语言格式化
Bundle 'wannesm/wmgraphviz.vim'
Bundle 'nono/jquery.vim'
Bundle 'godlygeek/tabular'
Bundle 'plasticboy/vim-markdown'
Bundle 'pangloss/vim-javascript'
Bundle 'python-syntax'
Bundle 'othree/html5.vim'

" 用全新的方式在文档中高效的移动光标, http://net.tutsplus.com/tutorials/other/vim-essential-plugin-easymotion/
" Bundle 'EasyMotion'
" Bundle 'tpope/vim-endwise'
" Bundle 'tpope/vim-git'
" Bundle 'tpope/vim-surround'
" Bundle 'tpope/vim-characterize'
" Bundle 'Buffergator'

" 插件的自定义配置

let g:NERDTreeWinSize=40
" Open a NERDTree automatically when vim starts up
" autocmd vimenter * NERDTree
" open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

autocmd BufEnter * NERDTreeTabsOpen
" Open tabTag automatically when vim starts up
" autocmd vimenter * TagbarToggle
autocmd BufEnter * TagbarOpen
autocmd VimEnter * nested :call tagbar#autoopen(1)
"autocmd FileType * nested :call tagbar#autoopen(0)
"autocmd BufEnter * nested :call tagbar#autoopen(0)

let g:tagbar_sort = 0

" For rainbow parens.
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

" Always on for rainbow parentheses
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces"

let g:indentLine_char = '¦'
let g:indentLine_color_term = 239

let g:ctrlp_max_files = 0

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

let g:neocomplete#enable_at_startup = 1

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" set shell=/bin/zsh
" All of your Plugins must be added before the following line
call vundle#end() " required
